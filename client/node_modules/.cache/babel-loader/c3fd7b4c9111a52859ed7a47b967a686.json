{"ast":null,"code":"var _jsxFileName = \"C:\\\\e_commerce_project\\\\yayas\\\\client\\\\src\\\\components\\\\StripeCheckout.js\";\nimport React, { useState, useEffect } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createPaymentIntent } from '../functions/stripe';\nimport { Link } from 'react-router-dom';\nimport { Card } from 'antd';\nimport { DollarOutlined, CheckOutlined } from '@ant-design/icons';\nimport Yayas from '../images/yayas.png';\nimport { createOrder, emptyUserCart } from '../functions/user';\nimport \"./stripeCheckout.css\";\n\nconst StripeCheckout = ({\n  history\n}) => {\n  //! trying to setLoading for page\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const {\n    user,\n    coupon\n  } = useSelector(state => ({ ...state\n  }));\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const [cartTotal, setCartTotal] = useState(0);\n  const [totalAfterDiscount, setTotalAfterDiscount] = useState(0);\n  const [payable, setPayable] = useState(0);\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    createPaymentIntent(user.token, coupon).then(res => {\n      console.log('create payment intent', res.data);\n      setClientSecret(res.data.clientSecret); // additional response received on successful payment\n\n      setCartTotal(res.data.cartTotal);\n      setTotalAfterDiscount(res.data.totalAfterDiscount);\n      setPayable(res.data.payable);\n    });\n  }, []);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setProcessing(true); //! setloading\n\n    setLoading(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: e.target.name.value\n        }\n      }\n    });\n\n    if (payload.error) {\n      //! setLoading\n      setLoading(false);\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      //! setLoading\n      setLoading(true); // here you get result after successful payment\n      // create order and save in database for admin to process\n\n      createOrder(payload, user.token).then(res => {\n        if (res.data.ok) {\n          // empty cart from local storage\n          if (typeof window !== 'undefined') localStorage.removeItem('cart'); // empty cart from redux\n\n          dispatch({\n            type: 'ADD_TO_CART',\n            payload: []\n          }); // reset coupon to false\n\n          dispatch({\n            type: 'COUPON_APPLIED',\n            payload: false\n          }); // empty cart from database\n\n          emptyUserCart(user.token);\n        }\n      }); // empty user cart from redux store and local storage\n\n      console.log(JSON.stringify(payload, null, 4));\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      setLoading(false);\n    }\n  };\n\n  const handleChange = async e => {\n    // listen to changes in the card element\n    // and display any errors as the \n    // customer types their card details\n    setDisabled(e.empty); // disable pay button if errors\n\n    setError(e.error ? e.error.message : \"\"); // show error message\n  };\n\n  const cartStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !succeeded && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, coupon && totalAfterDiscount !== undefined ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"alert alert-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 32\n    }\n  }, `Total after discount: $${totalAfterDiscount} `) : /*#__PURE__*/React.createElement(\"p\", {\n    className: \"alert alert-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 32\n    }\n  }, \"No coupon applied\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-9 pt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center pb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    cover: /*#__PURE__*/React.createElement(\"img\", {\n      src: Yayas,\n      style: {\n        height: '200px',\n        objectFit: 'cover',\n        marginBottom: '-30px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }),\n    actions: [/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DollarOutlined, {\n      className: \"text-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 29\n      }\n    }), \"Total: $ \", cartTotal), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CheckOutlined, {\n      className: \"text-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }\n    }), \"Total payable: $ \", (payable / 100).toFixed(2))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    className: \"stripe-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    id: \"card-element\",\n    options: cartStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"stipe-button\",\n    disabled: processing || disabled || succeeded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 21\n    }\n  }, processing ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 32\n    }\n  }) : \"Pay\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-error\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, error), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: succeeded ? 'result message' : 'result-message hidden',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, \"Payment Successful...\", \"\", /*#__PURE__*/React.createElement(Link, {\n    to: \"/user/history\",\n    id: \"card-payment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 25\n    }\n  }, \"View in your purchase history\")))));\n};\n\nexport default StripeCheckout;","map":{"version":3,"sources":["C:/e_commerce_project/yayas/client/src/components/StripeCheckout.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","useSelector","useDispatch","createPaymentIntent","Link","Card","DollarOutlined","CheckOutlined","Yayas","createOrder","emptyUserCart","StripeCheckout","history","loading","setLoading","dispatch","user","coupon","state","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","cartTotal","setCartTotal","totalAfterDiscount","setTotalAfterDiscount","payable","setPayable","stripe","elements","token","then","res","console","log","data","handleSubmit","e","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","name","target","value","message","ok","window","localStorage","removeItem","type","JSON","stringify","handleChange","empty","cartStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","undefined","height","objectFit","marginBottom","toFixed"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createPaymentIntent } from '../functions/stripe';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Card } from 'antd';\r\nimport { DollarOutlined, CheckOutlined } from '@ant-design/icons';\r\nimport Yayas from '../images/yayas.png';\r\n\r\nimport { createOrder, emptyUserCart } from '../functions/user';\r\n\r\nimport \"./stripeCheckout.css\";\r\n\r\nconst StripeCheckout = ({ history }) => {\r\n    //! trying to setLoading for page\r\n    const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const { user, coupon } = useSelector((state) => ({ ...state }));\r\n\r\n    const [succeeded, setSucceeded] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [processing, setProcessing] = useState('');\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [clientSecret, setClientSecret] = useState('');\r\n\r\n    const [cartTotal, setCartTotal] = useState(0);\r\n    const [totalAfterDiscount, setTotalAfterDiscount] = useState(0);\r\n    const [payable, setPayable] = useState(0);\r\n\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    useEffect(() => {\r\n        createPaymentIntent(user.token, coupon)\r\n            .then((res) => {\r\n                console.log('create payment intent', res.data);\r\n                setClientSecret(res.data.clientSecret);\r\n                // additional response received on successful payment\r\n                setCartTotal(res.data.cartTotal);\r\n                setTotalAfterDiscount(res.data.totalAfterDiscount);\r\n                setPayable(res.data.payable);\r\n            });\r\n    }, []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setProcessing(true);\r\n        //! setloading\r\n        setLoading(true);\r\n\r\n        const payload = await stripe.confirmCardPayment(clientSecret, {\r\n            payment_method: {\r\n                card: elements.getElement(CardElement),\r\n                billing_details: {\r\n                    name: e.target.name.value,\r\n                },\r\n            },\r\n        });\r\n        if (payload.error) {\r\n            //! setLoading\r\n            setLoading(false);\r\n            setError(`Payment failed ${payload.error.message}`);\r\n            setProcessing(false);\r\n        } else {\r\n            //! setLoading\r\n            setLoading(true);\r\n            // here you get result after successful payment\r\n            // create order and save in database for admin to process\r\n            createOrder(payload, user.token)\r\n                .then((res) => {\r\n                    if (res.data.ok) {\r\n                        // empty cart from local storage\r\n                        if (typeof window !== 'undefined') localStorage.removeItem('cart');\r\n                        // empty cart from redux\r\n                        dispatch({\r\n                            type: 'ADD_TO_CART',\r\n                            payload: [],\r\n                        });\r\n                        // reset coupon to false\r\n                        dispatch({\r\n                            type: 'COUPON_APPLIED',\r\n                            payload: false,\r\n                        });\r\n                        // empty cart from database\r\n                        emptyUserCart(user.token);\r\n\r\n                    }\r\n                });\r\n            // empty user cart from redux store and local storage\r\n            console.log(JSON.stringify(payload, null, 4));\r\n            setError(null);\r\n            setProcessing(false);\r\n            setSucceeded(true);\r\n            setLoading(false);\r\n\r\n        }\r\n    };\r\n\r\n    const handleChange = async (e) => {\r\n        // listen to changes in the card element\r\n        // and display any errors as the \r\n        // customer types their card details\r\n        setDisabled(e.empty); // disable pay button if errors\r\n        setError(e.error ? e.error.message : \"\"); // show error message\r\n    };\r\n\r\n    const cartStyle = {\r\n        style: {\r\n            base: {\r\n                color: \"#32325d\",\r\n                fontFamily: \"Arial, sans-serif\",\r\n                fontSmoothing: \"antialiased\",\r\n                fontSize: \"16px\",\r\n                \"::placeholder\": {\r\n                    color: \"#32325d\",\r\n                },\r\n            },\r\n            invalid: {\r\n                color: \"#fa755a\",\r\n                iconColor: \"#fa755a\",\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !succeeded && (\r\n                    <div>\r\n                        {coupon && totalAfterDiscount !== undefined\r\n                            ? (<p className=\"alert alert-success\">{`Total after discount: $${totalAfterDiscount} `}</p>)\r\n                            : (<p className=\"alert alert-danger\" >No coupon applied</p>)\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            <div className=\"col-md-9 pt-2\">\r\n                    {loading ? (\r\n                        <h4 className=\"text-danger\">Loading...</h4>\r\n                    ) : (\r\n                            <div className=\"text-center pb-5\">\r\n                <Card\r\n                    cover={\r\n                        <img src={Yayas} style={{\r\n                            height: '200px',\r\n                            objectFit: 'cover',\r\n                            marginBottom: '-30px',\r\n                        }}\r\n                        />\r\n                    }\r\n                    actions={[\r\n                        <>\r\n                            <DollarOutlined className=\"text-info\" />\r\n                            <br />\r\n                            Total: $ {cartTotal}\r\n                        </>,\r\n                        <>\r\n                            <CheckOutlined className=\"text-info\" />\r\n                            Total payable: $ {(payable / 100).toFixed(2)}\r\n                        </>\r\n                    ]}\r\n                />\r\n            </div>\r\n                        )}\r\n            </div>\r\n            \r\n\r\n            <form\r\n                id=\"payment-form\"\r\n                className=\"stripe-form\"\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <CardElement\r\n                    id=\"card-element\"\r\n                    options={cartStyle}\r\n                    onChange={handleChange}\r\n                />\r\n                <button\r\n                    className=\"stipe-button\"\r\n                    disabled={processing || disabled || succeeded}\r\n                >\r\n                    <span id=\"button-text\">\r\n                        {processing\r\n                            ? (<div className=\"spinner\" id=\"spinner\"></div>)\r\n                            : (\"Pay\")\r\n                        }\r\n                    </span>\r\n                </button>\r\n                <br />\r\n                {error && (\r\n                    <div className=\"card-error\" role=\"alert\">\r\n                        {error}\r\n                    </div>\r\n                )\r\n                }\r\n                <br />\r\n                <span className={succeeded ? 'result message' : 'result-message hidden'} >\r\n                    <div className='text-success'>Payment Successful...{\"\"}\r\n                        <Link to='/user/history' id='card-payment'>\r\n                            View in your purchase history\r\n                    </Link>\r\n                    </div>\r\n                </span>\r\n            </form>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default StripeCheckout;"]},"metadata":{},"sourceType":"module"}