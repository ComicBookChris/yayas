{"ast":null,"code":"var _jsxFileName = \"C:\\\\e_commerce_project\\\\yayas\\\\client\\\\src\\\\pages\\\\sub\\\\SubHome.js\";\nimport React, { useState, useEffect } from 'react';\nimport { getSub } from '../../functions/sub';\nimport ProductCard from '../../components/cards/ProductCard';\n/* Needed to grab the slug from the url, in order to do so, the \r\ncode uses match which is deconstructed from react router props. */\n\nconst SubHome = ({\n  match\n}) => {\n  /* State variables, single Sub can be left as useState({}). \r\n  The next bit of code sought after is the list of products that \r\n  is within the single Sub that was sought after. */\n  const [sub, setSub] = useState({});\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  /* De-structured slug so that it is easier to use.  */\n\n  const {\n    slug\n  } = match.params;\n  /* When the component mounts, the code needs to make a\r\n  request to the single Sub. */\n\n  useEffect(() => {\n    setLoading(true);\n    /* Backend does not know which Sub the frontend wants\r\n    unless the slug is sent. */\n\n    getSub(slug)\n    /* then the code gets the Sub, and sets the Sub  \r\n    with res.data. */\n    .then(res => {\n      /* console.log with JSON stringify which accepts 3 parameters.\r\n      1st will take the res.data, next will be null, and last will be\r\n      4 witch is used to indent the code so that it is much more \r\n      readable in the console. */\n      console.log(JSON.stringify(res.data, null, 4));\n      /* res.data.sub is now set in the state with setSub */\n\n      setSub(res.data.sub);\n      /* res.data.products is now set in the state with setProducts */\n\n      setProducts(res.data.products);\n      /* Once the response is received set loading to false */\n\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-center font-italic font-weight-normal p-3 mt-5 mb-5 display-4 jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-center font-italic font-weight-normal p-3 mt-5 mb-5 display-4 jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 29\n    }\n  }, products.length, \" Products in \", sub.name, \" sub category\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, products.map(p => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-4\",\n    key: p._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 38\n    }\n  }, /*#__PURE__*/React.createElement(ProductCard, {\n    product: p,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  })))));\n};\n\nexport default SubHome;","map":{"version":3,"sources":["C:/e_commerce_project/yayas/client/src/pages/sub/SubHome.js"],"names":["React","useState","useEffect","getSub","ProductCard","SubHome","match","sub","setSub","products","setProducts","loading","setLoading","slug","params","then","res","console","log","JSON","stringify","data","length","name","map","p","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AAEA;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC3B;;;AAGA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAEA;;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAWP,KAAK,CAACQ,MAAvB;AAEA;;;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA;;;AAEAT,IAAAA,MAAM,CAACU,IAAD;AACF;;AADJ,KAGKE,IAHL,CAGUC,GAAG,IAAI;AACT;;;;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,IAAnB,EAAyB,IAAzB,EAA+B,CAA/B,CAAZ;AACA;;AACAb,MAAAA,MAAM,CAACQ,GAAG,CAACK,IAAJ,CAASd,GAAV,CAAN;AACA;;AACAG,MAAAA,WAAW,CAACM,GAAG,CAACK,IAAJ,CAASZ,QAAV,CAAX;AACA;;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAfL;AAgBH,GApBQ,EAoBN,EApBM,CAAT;AAsBA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKD,OAAO,gBAEA;AAAI,IAAA,SAAS,EAAC,8EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,gBAOA;AAAI,IAAA,SAAS,EAAC,8EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,QAAQ,CAACa,MADd,mBACmCf,GAAG,CAACgB,IADvC,kBAVZ,CADJ,CADJ,eAkBI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKd,QAAQ,CAACe,GAAT,CAAcC,CAAD,iBAAO;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,GAAG,EAAEA,CAAC,CAACC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACjB,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAED,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADiB,CAApB,CALL,CAlBJ,CADJ;AA8BH,CAjED;;AAkEA,eAAepB,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getSub } from '../../functions/sub';\r\nimport ProductCard from '../../components/cards/ProductCard';\r\n\r\n/* Needed to grab the slug from the url, in order to do so, the \r\ncode uses match which is deconstructed from react router props. */\r\nconst SubHome = ({ match }) => {\r\n    /* State variables, single Sub can be left as useState({}). \r\n    The next bit of code sought after is the list of products that \r\n    is within the single Sub that was sought after. */\r\n    const [sub, setSub] = useState({});\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    /* De-structured slug so that it is easier to use.  */\r\n    const { slug } = match.params;\r\n\r\n    /* When the component mounts, the code needs to make a\r\n    request to the single Sub. */\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        /* Backend does not know which Sub the frontend wants\r\n        unless the slug is sent. */\r\n        getSub(slug)\r\n            /* then the code gets the Sub, and sets the Sub  \r\n            with res.data. */\r\n            .then(res => {\r\n                /* console.log with JSON stringify which accepts 3 parameters.\r\n                1st will take the res.data, next will be null, and last will be\r\n                4 witch is used to indent the code so that it is much more \r\n                readable in the console. */\r\n                console.log(JSON.stringify(res.data, null, 4));\r\n                /* res.data.sub is now set in the state with setSub */\r\n                setSub(res.data.sub);\r\n                /* res.data.products is now set in the state with setProducts */\r\n                setProducts(res.data.products);\r\n                /* Once the response is received set loading to false */\r\n                setLoading(false);\r\n            })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    {/* If the code has the loading state as true, then the code can show the loading text, \r\n                    otherwise can show the products.length and Sub.name that is held in state*/}\r\n                    {loading\r\n                        ? (\r\n                            <h4 className=\"text-center font-italic font-weight-normal p-3 mt-5 mb-5 display-4 jumbotron\">\r\n                                Loading...\r\n                            </h4>\r\n                        )\r\n                        : (\r\n                            <h4 className=\"text-center font-italic font-weight-normal p-3 mt-5 mb-5 display-4 jumbotron\">\r\n                                {products.length} Products in {sub.name} sub category\r\n                            </h4>\r\n                        )}\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                {/* Here the code needs to map through the products, and display them in the ProductCard. \r\n                To accomplish this, map through the array, get each product. Using a div to apply className\r\n                and key.  Using the ProductCard, show the entire information of a specific product given a \r\n                certain _id that is referenced in the key. */}\r\n                {products.map((p) => <div className=\"col-md-4\" key={p._id}>\r\n                    <ProductCard product={p} />\r\n                </div>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SubHome;"]},"metadata":{},"sourceType":"module"}