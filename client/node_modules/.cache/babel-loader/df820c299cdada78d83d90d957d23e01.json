{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { userReducer } from './userReducer';\nimport { searchReducer } from './searchReducer';\nimport { cartReducer } from './cartReducer';\nimport { drawerReducer } from './drawerReducer';\n/* Redux's combinedReducers which takes in an object of functions.\r\nThese functions run whenever dispatch is called and return value \r\nbecomes the app's new state.*/\n\nconst rootReducer = combineReducers({\n  /* user and search properties are now in the redux store */\n  user: userReducer,\n  search: searchReducer,\n  cart: cartReducer,\n  drawer: drawerReducer\n});\nexport default rootReducer;\n/* \r\nStore - holds the code's state - There is only one state.\r\nThe state is read only, that means that the state is only copied\r\nand modified then return. The original state remains unchanged. \r\n\r\nAction - State can be modified using actions - simple objects.\r\n\r\nDispatcher- The Action reaches the Reducer by the Dispatcher.\r\nActions needs to be sent by someone - known as dispatching\r\nan action.\r\n\r\nReducer - So, when the user presses on a button, this dispatches an Action\r\nthat goes to the Reducer, which modifies the Store, and the Reducer will\r\nreturn an updated State. For the Reducer the modify the state, it must have\r\naccess to the original state called the initial state.\r\n\r\n-pure functions\r\n-only mandatory argument is the 'type' \r\n\r\nSubscriber - listens for state change to update the ui (using connect)\r\n*/","map":{"version":3,"sources":["C:/e_commerce_project/yayas/client/src/reducers/index.js"],"names":["combineReducers","userReducer","searchReducer","cartReducer","drawerReducer","rootReducer","user","search","cart","drawer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AAEA;;;;AAGA,MAAMC,WAAW,GAAGL,eAAe,CAAC;AAChC;AACAM,EAAAA,IAAI,EAAEL,WAF0B;AAGhCM,EAAAA,MAAM,EAAEL,aAHwB;AAIhCM,EAAAA,IAAI,EAAEL,WAJ0B;AAKhCM,EAAAA,MAAM,EAAEL;AALwB,CAAD,CAAnC;AAQA,eAAeC,WAAf;AAEA","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { userReducer } from './userReducer';\r\nimport { searchReducer } from './searchReducer';\r\nimport {cartReducer} from './cartReducer';\r\nimport {drawerReducer} from './drawerReducer';\r\n\r\n/* Redux's combinedReducers which takes in an object of functions.\r\nThese functions run whenever dispatch is called and return value \r\nbecomes the app's new state.*/\r\nconst rootReducer = combineReducers({\r\n    /* user and search properties are now in the redux store */\r\n    user: userReducer,\r\n    search: searchReducer,\r\n    cart: cartReducer,\r\n    drawer: drawerReducer,\r\n}); \r\n\r\nexport default rootReducer; \r\n\r\n/* \r\nStore - holds the code's state - There is only one state.\r\nThe state is read only, that means that the state is only copied\r\nand modified then return. The original state remains unchanged. \r\n\r\nAction - State can be modified using actions - simple objects.\r\n\r\nDispatcher- The Action reaches the Reducer by the Dispatcher.\r\nActions needs to be sent by someone - known as dispatching\r\nan action.\r\n\r\nReducer - So, when the user presses on a button, this dispatches an Action\r\nthat goes to the Reducer, which modifies the Store, and the Reducer will\r\nreturn an updated State. For the Reducer the modify the state, it must have\r\naccess to the original state called the initial state.\r\n\r\n-pure functions\r\n-only mandatory argument is the 'type' \r\n\r\nSubscriber - listens for state change to update the ui (using connect)\r\n*/"]},"metadata":{},"sourceType":"module"}