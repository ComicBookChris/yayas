{"ast":null,"code":"var _jsxFileName = \"C:\\\\e_commerce_project\\\\yayas\\\\client\\\\src\\\\pages\\\\category\\\\CategoryHome.js\";\nimport React, { useState, useEffect } from 'react';\nimport { getCategory } from '../../functions/category';\nimport { Link } from 'react-router-dom';\nimport ProductCard from '../../components/cards/ProductCard';\n/* Needed to grab the slug from the url, in order to do so, the \r\ncode uses match which is deconstructed from react router props. */\n\nconst CategoryHome = ({\n  match\n}) => {\n  /* State variables, single category can be left as useState({}). \r\n  The next bit of code sought after is the list of products that \r\n  is within the single category that was sought after. */\n  const [category, setCategory] = useState({});\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  /* De-structured slug so that it is easier to use.  */\n\n  const {\n    slug\n  } = match.params;\n  /* When the component mounts, the code needs to make a\r\n  request to the single category. */\n\n  useEffect(() => {\n    setLoading(true);\n    /* Backend does not know which category the frontend wants\r\n    unless the slug is sent. */\n\n    getCategory(slug)\n    /* then the code gets the category, and sets the category  \r\n    with res.data. */\n    .then(res => {\n      /* console.log with JSON stringify which accepts 3 parameters.\r\n      1st will take the res.data, next will be null, and last will be\r\n      4 witch is used to indent the code so that it is much more \r\n      readable in the console. */\n      console.log(JSON.stringify(res.data, null, 4));\n      /* res.data is now set in the state with setCategory */\n\n      setCategory(res.data.category);\n      setProducts(res.data.products);\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-center p-3 mt-5 mb-5 display-4 jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-center font-italic font-weight-normal p-3 mt-5 mb-5 display-4 jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, products.length, \" Products in \", category.name, \" category\"))));\n};\n\nexport default CategoryHome;","map":{"version":3,"sources":["C:/e_commerce_project/yayas/client/src/pages/category/CategoryHome.js"],"names":["React","useState","useEffect","getCategory","Link","ProductCard","CategoryHome","match","category","setCategory","products","setProducts","loading","setLoading","slug","params","then","res","console","log","JSON","stringify","data","length","name"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,0BAA1B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AAEA;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAC9B;;;AAGA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AAEA;;AACA,QAAM;AAACa,IAAAA;AAAD,MAASP,KAAK,CAACQ,MAArB;AAEA;;;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA;;;AAEAV,IAAAA,WAAW,CAACW,IAAD;AACX;;AADA,KAGCE,IAHD,CAGMC,GAAG,IAAI;AACT;;;;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,IAAnB,EAAyB,IAAzB,EAA+B,CAA/B,CAAZ;AACA;;AACAb,MAAAA,WAAW,CAACQ,GAAG,CAACK,IAAJ,CAASd,QAAV,CAAX;AACAG,MAAAA,WAAW,CAACM,GAAG,CAACK,IAAJ,CAASZ,QAAV,CAAX;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAbD;AAcH,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,OAAO,gBACJ;AAAI,IAAA,SAAS,EAAC,+CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADI,gBAIJ;AAAI,IAAA,SAAS,EAAC,8EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,QAAQ,CAACa,MADd,mBACmCf,QAAQ,CAACgB,IAD5C,cALR,CADJ,CADA,CADJ;AAiBH,CAlDD;;AAmDA,eAAelB,YAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {getCategory} from '../../functions/category';\r\nimport {Link} from 'react-router-dom';\r\nimport ProductCard from '../../components/cards/ProductCard';\r\n\r\n/* Needed to grab the slug from the url, in order to do so, the \r\ncode uses match which is deconstructed from react router props. */\r\nconst CategoryHome = ({match}) => {\r\n    /* State variables, single category can be left as useState({}). \r\n    The next bit of code sought after is the list of products that \r\n    is within the single category that was sought after. */\r\n    const [category, setCategory] = useState({});\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    /* De-structured slug so that it is easier to use.  */\r\n    const {slug} = match.params;\r\n\r\n    /* When the component mounts, the code needs to make a\r\n    request to the single category. */\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        /* Backend does not know which category the frontend wants\r\n        unless the slug is sent. */\r\n        getCategory(slug)\r\n        /* then the code gets the category, and sets the category  \r\n        with res.data. */\r\n        .then(res => {\r\n            /* console.log with JSON stringify which accepts 3 parameters.\r\n            1st will take the res.data, next will be null, and last will be\r\n            4 witch is used to indent the code so that it is much more \r\n            readable in the console. */\r\n            console.log(JSON.stringify(res.data, null, 4));\r\n            /* res.data is now set in the state with setCategory */\r\n            setCategory(res.data.category);\r\n            setProducts(res.data.products);\r\n            setLoading(false);\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n                {loading ? (\r\n                    <h4 className=\"text-center p-3 mt-5 mb-5 display-4 jumbotron\">Loading...</h4>\r\n                )\r\n                : (\r\n                    <h4 className=\"text-center font-italic font-weight-normal p-3 mt-5 mb-5 display-4 jumbotron\">\r\n                        {products.length} Products in {category.name} category\r\n                    </h4>\r\n                )}\r\n            </div>\r\n        </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default CategoryHome;"]},"metadata":{},"sourceType":"module"}