{"ast":null,"code":"var _jsxFileName = \"C:\\\\e_commerce_project\\\\yayas\\\\client\\\\src\\\\components\\\\StripeCheckout.js\";\nimport React, { useState, useEffect } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createPaymentIntent } from '../functions/stripe';\n\nconst StripeCheckout = ({\n  history\n}) => {\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => ({ ...state\n  }));\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    createPaymentIntent(user.token).then(res => {\n      console.log('create payment intent', res.data);\n      setClientSecret(res.data.clientSecret);\n    });\n  }, []);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: e.target.name.value\n        }\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      // here you get result after successful payment\n      // create order and save in database for admin to process\n      // empty user cart from redux store and local storage\n      console.log(JSON.stringify(payload, null, 4));\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  const handleChange = async e => {\n    // listen to changes in the card element\n    // and display any errors as the \n    // customer types their card details\n    setDisabled(e.empty); // disable pay button if errors\n\n    setError(e.error ? e.error.message : \"\"); // show error message\n  };\n\n  const cartStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    className: \"stripe-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    id: \"card-element\",\n    options: cartStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"stipe-button\",\n    disabled: processing || disabled || succeeded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, processing ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 32\n    }\n  }) : \"Pay\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-error\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }, error)));\n};\n\nexport default StripeCheckout;","map":{"version":3,"sources":["C:/e_commerce_project/yayas/client/src/components/StripeCheckout.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","useSelector","useDispatch","createPaymentIntent","StripeCheckout","history","dispatch","user","state","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","token","then","res","console","log","data","handleSubmit","e","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","name","target","value","message","JSON","stringify","handleChange","empty","cartStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createPaymentIntent } from '../functions/stripe';\r\n\r\nconst StripeCheckout = ({ history }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { user } = useSelector((state) => ({ ...state }));\r\n\r\n    const [succeeded, setSucceeded] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [processing, setProcessing] = useState('');\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [clientSecret, setClientSecret] = useState('');\r\n\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    useEffect(() => {\r\n        createPaymentIntent(user.token)\r\n            .then((res) => {\r\n                console.log('create payment intent', res.data);\r\n                setClientSecret(res.data.clientSecret);\r\n            });\r\n    }, []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setProcessing(true);\r\n\r\n        const payload = await stripe.confirmCardPayment(clientSecret, {\r\n            payment_method: {\r\n                card: elements.getElement(CardElement),\r\n                billing_details: {\r\n                    name: e.target.name.value,\r\n                },\r\n            },\r\n        });\r\n        if(payload.error) {\r\n            setError(`Payment failed ${payload.error.message}`)\r\n            setProcessing(false)\r\n        } else {\r\n            // here you get result after successful payment\r\n            // create order and save in database for admin to process\r\n            // empty user cart from redux store and local storage\r\n            console.log(JSON.stringify(payload, null, 4));\r\n            setError(null);\r\n            setProcessing(false);\r\n            setSucceeded(true);\r\n\r\n        }\r\n    };\r\n\r\n    const handleChange = async (e) => {\r\n        // listen to changes in the card element\r\n        // and display any errors as the \r\n        // customer types their card details\r\n        setDisabled(e.empty); // disable pay button if errors\r\n        setError(e.error ? e.error.message : \"\"); // show error message\r\n    };\r\n\r\n    const cartStyle = {\r\n        style: {\r\n            base: {\r\n                color: \"#32325d\",\r\n                fontFamily: \"Arial, sans-serif\",\r\n                fontSmoothing: \"antialiased\",\r\n                fontSize: \"16px\",\r\n                \"::placeholder\": {\r\n                    color: \"#32325d\",\r\n                },\r\n            },\r\n            invalid: {\r\n                color: \"#fa755a\",\r\n                iconColor: \"#fa755a\",\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <>\r\n    <p ></p>\r\n\r\n            <form\r\n                id=\"payment-form\"\r\n                className=\"stripe-form\"\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <CardElement\r\n                    id=\"card-element\"\r\n                    options={cartStyle}\r\n                    onChange={handleChange}\r\n                />\r\n                <button\r\n                    className=\"stipe-button\"\r\n                    disabled={processing || disabled || succeeded}\r\n                >\r\n                    <span id=\"button-text\">\r\n                        {processing\r\n                            ? (<div className=\"spinner\" id=\"spinner\"></div>)\r\n                            : (\"Pay\")\r\n                        }\r\n                    </span>\r\n                </button>\r\n                <br />\r\n                {error && (\r\n                    <div className=\"card-error\" role=\"alert\">\r\n                        {error}\r\n                    </div>\r\n                )\r\n                }\r\n            </form>\r\n\r\n\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default StripeCheckout;"]},"metadata":{},"sourceType":"module"}